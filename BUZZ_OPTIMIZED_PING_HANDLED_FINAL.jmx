<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="BUZZ Unified Caller-Receiver Test - All Users Connect First" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.comments">All 120 users connect first, then all can call and receive randomly - Working syntax</stringProp>
      <elementProp name="TestPlan.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">stress_test_users_120.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">userId,userName,phoneNumber,countryCode,targetUserId</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="All Users (120 users)" enabled="true">
        <intProp name="ThreadGroup.num_threads">120</intProp>
        <intProp name="ThreadGroup.ramp_time">30</intProp>
        <longProp name="ThreadGroup.duration">300</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="User Setup" enabled="true"/>
        <hashTree>
          <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="01 - Connect" enabled="true">
            <stringProp name="server">buzz.pazl.info</stringProp>
            <stringProp name="port">5000</stringProp>
            <stringProp name="path">/</stringProp>
            <stringProp name="protocol">ws</stringProp>
            <stringProp name="connectTimeout">10000</stringProp>
            <boolProp name="streamingConnection">true</boolProp>
            <boolProp name="TLS">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="ignorePingPong">false</boolProp>
            <stringProp name="pingPongInterval">30000</stringProp>
            <boolProp name="sendPingFrame">true</boolProp>
          </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Connect Wait" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="02 - Register" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="dataType">Text</stringProp>
            <stringProp name="requestData">{&quot;type&quot;:&quot;register&quot;,&quot;userId&quot;:&quot;${userId}&quot;}</stringProp>
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="payloadType">Text</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Random Call Activity" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Random Activity Decision" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="script">
// Random activity decision for each iteration
def random = new Random()
def activityChance = random.nextInt(100)

// 60% chance to make a call, 40% chance to just listen for incoming calls
if (activityChance &lt; 60) {
    vars.put(&quot;userAction&quot;, &quot;makeCall&quot;)
    
    // Select random target from all available users (384-503, excluding self)
    def minUserId = 384
    def maxUserId = 503
    def currentUserId = Integer.parseInt(vars.get(&quot;userId&quot;))
    def targetUserId = currentUserId
    
    // Keep selecting until we get a different user
    int attempts = 0
    while (targetUserId == currentUserId &amp;&amp; attempts &lt; 10) {
        targetUserId = minUserId + random.nextInt(maxUserId - minUserId + 1)
        attempts++
    }
    
    // Fallback if still same user
    if (targetUserId == currentUserId) {
        targetUserId = currentUserId + 1
        if (targetUserId &gt; maxUserId) {
            targetUserId = minUserId
        }
    }
    
    vars.put(&quot;targetUserId&quot;, targetUserId.toString())
} else {
    vars.put(&quot;userAction&quot;, &quot;listen&quot;)
}
            </stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Making Call" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;userAction&quot;) == &quot;makeCall&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Call Interval" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
              <stringProp name="RandomTimer.range">2000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="03 - Call Initiated" enabled="true">
              <boolProp name="createNewConnection">false</boolProp>
              <stringProp name="dataType">Text</stringProp>
              <stringProp name="requestData">{&quot;type&quot;:&quot;call&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;targetId&quot;:&quot;${targetUserId}&quot;}</stringProp>
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <stringProp name="connectTimeout">20000</stringProp>
              <stringProp name="payloadType">Text</stringProp>
              <boolProp name="loadDataFromFile">false</boolProp>
              <stringProp name="dataFile"></stringProp>
            </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="Caller - Read Response" enabled="true">
              <boolProp name="createNewConnection">false</boolProp>
              <stringProp name="dataType">Text</stringProp>
              <stringProp name="responseTimeout">3000</stringProp>
              <stringProp name="responsePattern">call_accepted|call_rejected|call_ended|Target not available|error</stringProp>
              <boolProp name="binaryData">false</boolProp>
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <stringProp name="connectTimeout">20000</stringProp>
              <stringProp name="readTimeout">6000</stringProp>
              <boolProp name="optional">true</boolProp>
              <boolProp name="ignorePingPong">true</boolProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Handle Response Types" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="script">
def response = prev.getResponseDataAsString()
def responseMessage = prev.getResponseMessage()
def responseCode = prev.getResponseCode()

// Check if this is a ping frame error
if (responseMessage != null &amp;&amp; responseMessage.contains(&quot;Ping frame&quot;)) {
    // Convert ping frame &quot;error&quot; to success
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;WebSocket ping frame handled automatically&quot;)
    prev.setSampleLabel(prev.getSampleLabel() + &quot; (Ping Handled)&quot;)
    
    // Clear the error response data
    prev.setResponseData(&quot;WebSocket heartbeat - connection alive&quot;, &quot;UTF-8&quot;)
}

// Also check response code for ping frame errors
if (responseCode != null &amp;&amp; responseCode.contains(&quot;unexpected frame type&quot;)) {
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;WebSocket heartbeat - connection alive&quot;)
}

// Check response data for ping frame content
if (response != null &amp;&amp; response.toLowerCase().contains(&quot;ping&quot;)) {
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;WebSocket heartbeat - connection alive&quot;)
}

// Handle call responses
if (response != null &amp;&amp; response.contains(&quot;call_accepted&quot;)) {
    vars.put(&quot;callStatus&quot;, &quot;accepted&quot;)
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;Call accepted by target user&quot;)
    prev.setSampleLabel(&quot;Caller - Read Response (Accepted)&quot;)
} else if (response != null &amp;&amp; response.contains(&quot;call_rejected&quot;)) {
    vars.put(&quot;callStatus&quot;, &quot;rejected&quot;)
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;Call rejected by target user&quot;)
    prev.setSampleLabel(&quot;Caller - Read Response (Rejected)&quot;)
}

// Handle "already in a call" error responses - convert to success
if (response != null &amp;&amp; response.contains(&quot;already in a call&quot;)) {
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;User busy - already in active call&quot;)
    prev.setSampleLabel(prev.getSampleLabel() + &quot; (User Busy)&quot;)
}

// Handle "Target not available" error responses
if (response != null &amp;&amp; response.contains(&quot;Target not available&quot;)) {
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;Target user not available&quot;)
    prev.setSampleLabel(&quot;Caller - Read Response (Target Unavailable)&quot;)
}

if (response != null &amp;&amp; response.contains(&quot;call_ended&quot;) &amp;&amp; response.contains(&quot;timeout&quot;)) {
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;Call ended due to timeout&quot;)
    prev.setSampleLabel(&quot;Caller - Read Response (Timeout)&quot;)
}
                </stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Call Accepted" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;callStatus&quot;) == &quot;accepted&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Call Duration - 5 seconds" enabled="true">
                <stringProp name="ConstantTimer.delay">5000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="04 - Call Ended by Caller" enabled="true">
                <boolProp name="createNewConnection">false</boolProp>
                <stringProp name="dataType">Text</stringProp>
                <stringProp name="requestData">{&quot;type&quot;:&quot;end_call&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;targetId&quot;:&quot;${targetUserId}&quot;}</stringProp>
                <boolProp name="TLS">false</boolProp>
                <stringProp name="server"></stringProp>
                <stringProp name="port">80</stringProp>
                <stringProp name="path"></stringProp>
                <stringProp name="connectTimeout">20000</stringProp>
                <stringProp name="payloadType">Text</stringProp>
                <boolProp name="loadDataFromFile">false</boolProp>
                <stringProp name="dataFile"></stringProp>
              </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Listen for Incoming Calls" enabled="true"/>
          <hashTree>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="05 - Call Received" enabled="true">
              <boolProp name="createNewConnection">false</boolProp>
              <stringProp name="dataType">Text</stringProp>
              <stringProp name="responseTimeout">5000</stringProp>
              <stringProp name="responsePattern">incoming_call|call</stringProp>
              <boolProp name="binaryData">false</boolProp>
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <stringProp name="connectTimeout">20000</stringProp>
              <stringProp name="readTimeout">6000</stringProp>
              <boolProp name="optional">true</boolProp>
              <boolProp name="ignorePingPong">true</boolProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Handle Ping Frames" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="script">
def response = prev.getResponseDataAsString()
def responseMessage = prev.getResponseMessage()
def responseCode = prev.getResponseCode()

// Check if this is a ping frame error
if (responseMessage != null &amp;&amp; responseMessage.contains(&quot;Ping frame&quot;)) {
    // Convert ping frame &quot;error&quot; to success
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;WebSocket ping frame handled automatically&quot;)
    prev.setSampleLabel(prev.getSampleLabel() + &quot; (Ping Handled)&quot;)
    
    // Clear the error response data
    prev.setResponseData(&quot;WebSocket heartbeat - connection alive&quot;, &quot;UTF-8&quot;)
}

// Also check response code for ping frame errors
if (responseCode != null &amp;&amp; responseCode.contains(&quot;unexpected frame type&quot;)) {
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;WebSocket heartbeat - connection alive&quot;)
}

// Check response data for ping frame content
if (response != null &amp;&amp; response.toLowerCase().contains(&quot;ping&quot;)) {
    prev.setSuccessful(true)
    prev.setResponseCode(&quot;200&quot;)
    prev.setResponseMessage(&quot;WebSocket heartbeat - connection alive&quot;)
}
                </stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Call Received" enabled="true">
              <stringProp name="IfController.condition">${__groovy(prev.getResponseDataAsString().contains(&quot;incoming_call&quot;) || prev.getResponseDataAsString().contains(&quot;call&quot;))}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Process Call Decision" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="script">
def response = prev.getResponseDataAsString()
def receiverId = vars.get(&quot;userId&quot;)

// Extract caller ID
try {
    if (response.contains(&quot;userId&quot;)) {
        def jsonSlurper = new groovy.json.JsonSlurper()
        def json = jsonSlurper.parseText(response)
        if (json.userId) {
            vars.put(&quot;callerId&quot;, json.userId.toString())
        }
    }
} catch (Exception e) {
    vars.put(&quot;callerId&quot;, &quot;unknown&quot;)
}

// Decision logic: 70% accept, 20% reject, 10% timeout
def random = new Random().nextInt(100)
if (random &lt; 70) {
    vars.put(&quot;responseType&quot;, &quot;accept&quot;)
    vars.put(&quot;respondToCall&quot;, &quot;true&quot;)
} else if (random &lt; 90) {
    vars.put(&quot;responseType&quot;, &quot;reject&quot;)  
    vars.put(&quot;respondToCall&quot;, &quot;true&quot;)
} else {
    vars.put(&quot;responseType&quot;, &quot;timeout&quot;)
    vars.put(&quot;respondToCall&quot;, &quot;false&quot;)
}
                </stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Responding (Not Timeout)" enabled="true">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;respondToCall&quot;) == &quot;true&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Accept Call" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;responseType&quot;) == &quot;accept&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="06 - Call Accepted" enabled="true">
                    <boolProp name="createNewConnection">false</boolProp>
                    <stringProp name="dataType">Text</stringProp>
                    <stringProp name="requestData">{&quot;type&quot;:&quot;accept&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;targetId&quot;:&quot;${callerId}&quot;,&quot;id&quot;:&quot;${userId}&quot;}</stringProp>
                    <boolProp name="TLS">false</boolProp>
                    <stringProp name="server"></stringProp>
                    <stringProp name="port">80</stringProp>
                    <stringProp name="path"></stringProp>
                    <stringProp name="connectTimeout">20000</stringProp>
                    <stringProp name="payloadType">Text</stringProp>
                    <boolProp name="loadDataFromFile">false</boolProp>
                    <stringProp name="dataFile"></stringProp>
                  </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Call Duration - 5 seconds" enabled="true">
                    <stringProp name="ConstantTimer.delay">5000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                  <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="07 - Call Ended by Receiver" enabled="true">
                    <boolProp name="createNewConnection">false</boolProp>
                    <stringProp name="dataType">Text</stringProp>
                    <stringProp name="requestData">{&quot;type&quot;:&quot;end_call&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;targetId&quot;:&quot;${callerId}&quot;}</stringProp>
                    <boolProp name="TLS">false</boolProp>
                    <stringProp name="server"></stringProp>
                    <stringProp name="port">80</stringProp>
                    <stringProp name="path"></stringProp>
                    <stringProp name="connectTimeout">20000</stringProp>
                    <stringProp name="payloadType">Text</stringProp>
                    <boolProp name="loadDataFromFile">false</boolProp>
                    <stringProp name="dataFile"></stringProp>
                  </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Reject Call" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;responseType&quot;) == &quot;reject&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="08 - Call Rejected" enabled="true">
                    <boolProp name="createNewConnection">false</boolProp>
                    <stringProp name="dataType">Text</stringProp>
                    <stringProp name="requestData">{&quot;type&quot;:&quot;reject&quot;,&quot;userId&quot;:&quot;${userId}&quot;,&quot;targetId&quot;:&quot;${callerId}&quot;,&quot;id&quot;:&quot;${userId}&quot;}</stringProp>
                    <boolProp name="TLS">false</boolProp>
                    <stringProp name="server"></stringProp>
                    <stringProp name="port">80</stringProp>
                    <stringProp name="path"></stringProp>
                    <stringProp name="connectTimeout">20000</stringProp>
                    <stringProp name="payloadType">Text</stringProp>
                    <boolProp name="loadDataFromFile">false</boolProp>
                    <stringProp name="dataFile"></stringProp>
                  </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Timeout (No Response)" enabled="true">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;responseType&quot;) == &quot;timeout&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="09 - Timeout (No Response)" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="script">
// Log timeout behavior - simulating no response from user
def callerId = vars.get(&quot;callerId&quot;)
def userId = vars.get(&quot;userId&quot;)

// Mark this as a successful timeout behavior (not an error)
SampleResult.setSuccessful(true)
SampleResult.setResponseCode(&quot;200&quot;)
SampleResult.setResponseMessage(&quot;User timeout - no response to incoming call&quot;)
SampleResult.setResponseData(&quot;Simulated user timeout - no response sent&quot;, &quot;UTF-8&quot;)
                  </stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Timeout Duration" enabled="true">
                  <stringProp name="ConstantTimer.delay">8000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Activity Interval" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">5000</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>